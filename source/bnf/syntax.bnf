program ::= %w* ( stmt_top %w* )* ;
	stmt_top ::=
		function ;



#=============================
#  Helper patterns
#=============================
w ::= " " | "\t" | nl | comment ;
nl ::= "\r\n" | "\n" ;

digit ::= "0" -> "9" ;
	digit_nz ::= "1" -> "9" ;
letter ::= "a" -> "z" | "A" -> "Z" ;



#=============================
#  Comments
#=============================
comment ::= comment_single | comment_multi ;
	comment_single ::= "//" !( nl )* nl? ; # Optional as the comment might be on a EOF
	comment_multi  ::= "/*" ( "\\*" | !( "*/" )+ )* "*/" ;



#=============================
#  Constants
#=============================
constant ::= boolean
	| string
	| float | integer ;

string ::= string_text ;
	string_text ::= %"\'" ( ( "\\" !"" ) | !( "\'" ) )* %"\'" ;

boolean ::= "true" | "false" ;

void ::= "void" ;

integer ::= "-"? ...integer_u ;
	integer_u ::= ( digit_nz digit* ) | zero ;
	zero ::= "0" ;
float ::= ...integer "." ...integer_u ( "e" ...integer )? ;



#=============================
#  Variables
#=============================
name ::= ...(( letter | "_" )+ ( letter | digit | "_" )*) ;

access ::= name ( %w* accessor )* ;
	accessor ::= access_static | access_dynamic | access_comp ;
	access_static  ::= %"." ...name ;
	access_dynamic ::= %"[]" ;
	access_comp    ::= %"#[]";

declare ::= %( "let" w* ) name %w* (%":" %w* access %w*)? %("=" w*) integer %(w* ";") ;



#=============================
#  Function
#=============================
function ::= func_head %w* ( func_body | ";" ) ;
	func_head ::= %("fn" w+) ...name %( w* "(" w* ) func_args %(w* ")" w* ":" w*) access ;
	func_args ::= ( func_arg %w* ( %( "," w* ) func_arg )* )? ;
		func_arg ::= ...name %( w* ":" w* ) access ;
	func_body ::= %( "{" w* ) ( func_stmt %w* )* %( w* "}" w* ";"? ) ;
		func_stmt ::= declare | return | func_call ;

func_call ::= ...name func_call_body;
	func_call_body ::= %( w* "(" w* ) ( expr %w* ( %( "," w* ) expr %w* )* )? %( ")" w* ) ;

return ::= %("return" w+) expr %";";

#=============================
#  Expression
#=============================
expr ::= expr_arg %w* ( ...expr_infix %w* expr_arg %w* )* ;
	expr_prefix ::= "!" | "-" ;
	expr_infix ::= "&&" | "||" | "==" | "!=" | "<=" | ">=" | "<" | ">"
		| "%" | "*" | "/" | "+" | "-"
		| "->" ;
	expr_arg ::= expr_prefix? %w* ( constant | expr_brackets | expr_val ) ;
		expr_val ::= access func_call_body? ;
	expr_brackets ::= %( "(" w* ) expr %( w* ")" ) ;